#! /usr/bin/ruby

require 'rubygems'
require "../functions/connect.rb"
require 'xml'
require 'rack'
require 'digest/sha1'
require '../functions/uuid.rb'

    $dbh=dbconnect

XML::Error.set_handler(&XML::Error::QUIET_HANDLER)
class UserLogin
    def call(env)
        
        $dbh.ping()

        req= Rack::Request.new(env)
        
         begin 
            doc = XML::Document.string(req.body.read)
        rescue Exception => e
            xml = "<error no='1'>XML ERROR: #{e.message}</error>"
            return [500,{"Content-Type" => "text/xml"},[xml]]                
         end

        #Errorhandling

    #read the file
        begin
            relaxng_doc = XML::Document.file('../../interface/user/login/request.rng')
            relaxng_sch = XML::RelaxNG.document(relaxng_doc)
            #validate relax ng    
                begin 
                    doc.validate_relaxng(relaxng_sch)
                rescue Exception => e
                     xml = "<error no='2'>XML Validation ERROR: #{e.message}</error>"
                    return [500,{"Content-Type" => "text/xml"},[xml]]                
                end

        rescue
            xml = "<error no='3'>Couldn't open relaxng file. Check permissions or path</error>"
            return [500,{"Content-Type" => "text/xml"},[xml]]
        end
    #kill the server from outside

    c=req.query_string()
    if(c=="die")
    abort
    end

        username = doc.find("/gts/username").first.content
        password = Digest::SHA1.hexdigest(doc.find("/gts/password").first.content)
        key = UUID.create.to_s

        #at request check if user is logged in
        sql = "select * from geousers where username=? AND password=?"
        st = $dbh.prepare(sql)
        st.execute(username, password)
        #rows = $dbh.affected_rows()
        if $dbh.affected_rows > 0
            puts $dbh.affected_rows
            login(username, key)
        else
           xml = "<error no='7'>Username or Password do not match.</error>"
           return [203,{"Content-Type" => "text/xml"},[xml]]  
        end

    end

    def login(username, key)
        
        sql = "insert into geologgedin (username,logginschlussel) values (?,?) 
        ON DUPLICATE KEY UPDATE username=?, logginschlussel=?;"
        begin
           st = $dbh.prepare(sql)
           st.execute(username,key,username,key)
           xml = "<gts query='user/login'><success username='#{username}' key='#{key}'/></gts>"
           return [202,{"Content-Type" => "text/xml"},[xml]]  
        rescue Exception => e
           xml = "<error no='6'>DB Error: #{e.message}.</error>"
           return [203,{"Content-Type" => "text/xml"},[xml]]  
        end
    end

end

Rack::Handler::FastCGI.run UserLogin.new
