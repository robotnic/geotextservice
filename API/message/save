#! /usr/bin/ruby

require 'rubygems'
require '../functions/connect.rb'
require 'xml'
require 'rack'

$dbh=dbconnect   #hier eine global variable mit $

XML::Error.set_handler(&XML::Error::QUIET_HANDLER)


class MessageSave

  
    def call(env)
$dbh.ping()
		req= Rack::Request.new(env);

		#Errorhandling
    
		begin
			doc = XML::Document.string(req.body.read);
			
		rescue Exception => e
			xml = "<error no='1'>XML ERROR: #{e.message}</error>"
			return [501,{"Content-Type" => "text/xml"},[xml]] 
		end
		

		#read the file
		begin
			relaxng_doc = XML::Document.file('../../interface/message/save/request.rng')
			relaxng_sch = XML::RelaxNG.document(relaxng_doc)
			#validate relax ng    
				begin 
					doc.validate_relaxng(relaxng_sch)
				rescue Exception => e
					xml = "<error no='7'>XML ERROR: #{e.message}</error>"
					return [501,{"Content-Type" => "text/xml"},[xml]]                
				end

		rescue
			xml = "<error no='5'>Couldn't open relaxng file. Check permissions or path</error>"
			return [501,{"Content-Type" => "text/xml"},[xml]]
		end
				
		#kill the server from outside
		c=req.query_string()
		if(c=="die")
		abort
		end
	
    xmlresponse = "<gts query='message/save'>"
    

      key=doc.root.attributes.get_attribute("key").value;

    doc.find("/gts/content").each {|node| 
      lon=node.attributes.get_attribute("lon").value; 
      lat=node.attributes.get_attribute("lat").value;
      
      begin 
        id = node.attributes.get_attribute("id").value;
      rescue
        id = nil;
      end                
    
      begin                                        
        content = node.first.content;
      rescue
        return
      end
    
     returnary = writetodb(lat, lon, content,key,id);
     
     
     if id==nil
       xmlresponse = xmlresponse+"<content lat='#{lat}' lon='#{lon}' id='#{returnary[0]}' user='#{returnary[2]}' timestamp='#{returnary[1]}'>" 
     else
       xmlresponse = xmlresponse+"<content lat='#{lat}' lon='#{lon}' id='#{id}' user='#{returnary[2]}' timestamp='#{returnary[1]}'>" 
     end
     
     xmlresponse = xmlresponse+content+"</content>"
     
    };
    
      xmlresponse = xmlresponse+"</gts>"
      
      puts YAML::dump(xmlresponse)
      
      return [200,{"Content-Type" => "text/xml"},[xmlresponse]]
	end
  
  
  
  
  
  
  
  
  
  def writetodb(lat,lon,message,key,id=nil)   

      if id.nil?
        sql = "insert into geopoints(lat,lon,message) values (?,?,?);"
    
        st=$dbh.prepare(sql);
        
        #sql2 = "select timestamp, id from geopoints where id = @@IDENTITY"
        st.execute(lat,lon,message);
        
        newid = $dbh.insert_id;
        sql2 = "select `time_stamp` from geopoints where id = ?"
                
        st=$dbh.prepare(sql2);
        st.execute(id);
        while row = st.fetch do
          
          timestamp = row[0];
        
        end
        
        sql3 = "select username from geologgedin where logginschlussel =?;"
        
        st=$dbh.prepare(sql3);
        st.execute(key);
        
          while row = st.fetch do
          
          username = row[0];
        
        end
        
        returnary = [newid, timestamp, username]
        
        

      else
        sql = "update geopoints set lat=?,lon=?,message=? where id =?;"
        
        st=$dbh.prepare(sql);
                
        
                
        st.execute(lat,lon,message,id);
        
        sql2 = "select `time_stamp` from geopoints where id =?;"
        
        st=$dbh.prepare(sql2);
        st.execute(id);
        while row = st.fetch do
          
          timestamp = row[0];

        end
        
        sql3 = "select username from geologgedin where logginschlussel=?;"
        
        st=$dbh.prepare(sql3);
        st.execute(key);
        
          while row = st.fetch do
          
          username = row[0];
        
        end
        
        returnary = [id, timestamp, username]
      end
      return(returnary);
      
  end
  
 
end

Rack::Handler::FastCGI.run MessageSave.new
